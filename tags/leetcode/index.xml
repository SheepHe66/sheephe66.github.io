<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on SheepHe&#39;s Blog</title>
    <link>https://sheephe66.github.io/tags/leetcode/</link>
    <description>Recent content in LeetCode on SheepHe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Apr 2022 13:23:30 +0800</lastBuildDate><atom:link href="https://sheephe66.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 反转链表</title>
      <link>https://sheephe66.github.io/p/leetcode-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 27 Apr 2022 13:23:30 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/leetcode-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>LeetCode-反转链表 题目信息 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。
示例1：
输入：head = [1,2,3,4,5] 输出：[5,4,3,2,1] 示例2：
输入：head = [1,2] 输出：[2,1] class Solution { public ListNode reverseList(ListNode head){ ListNode prev = null; ListNode curr = head; ListNode next = null; while(curr != null) { next = curr.next; curr.next = prev; prev = curr; curr = next; } return prev; } } 算法思路： 需要定义三个指针：prev ， curr ， next
curr ：表示当前节点，相当于for循环中的 i，用来遍历链表，使循环往前走
prev ：用来返回最终反转后的链表，遍历完链表，prev 指向新链表的头部
next ：占住curr 的下一个节点</description>
    </item>
    
    <item>
      <title>LeetCode 排序数组</title>
      <link>https://sheephe66.github.io/p/leetcode-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 10 Apr 2022 21:54:08 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/leetcode-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>LeetCode—排序数组 题目 给你一个整数数组 nums，请你将该数组升序排列。
示例 1：
输入：nums = [5,2,3,1] 输出：[1,2,3,5] 示例 2：
输入：nums = [5,1,1,2,0,0] 输出：[0,0,1,1,2,5] 提示：
1 &amp;lt;= nums.length &amp;lt;= 5 * 104 -5 * 104 &amp;lt;= nums[i] &amp;lt;= 5 * 104 冒泡排序 （超出时间限制） 此题一开始想到的就是冒泡排序，暴力两层循环，可以运行，但时间复杂度太大， 超出时间限制
public int[] sortArray(int[] nums) { for(int i = 0; i &amp;lt; nums.length; i++) { for(int j = i+1; j &amp;lt; nums.length; j++) { if(nums[i] &amp;gt; nums[j]) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } } } return nums; } 快速排序 （最佳：8ms） // 快速排序 1：基本快速排序  /** * 列表大小等于或小于该大小，将优先于 quickSort 使用插入排序 */ private static final int INSERTION_SORT_THRESHOLD = 7; private static final Random RANDOM = new Random(); public int[] sortArray(int[] nums) { int len = nums.</description>
    </item>
    
  </channel>
</rss>
