<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SheepHe&#39;s Blog</title>
    <link>https://sheephe66.github.io/post/</link>
    <description>Recent content in Posts on SheepHe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Apr 2022 22:12:28 +0800</lastBuildDate><atom:link href="https://sheephe66.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Map详解</title>
      <link>https://sheephe66.github.io/p/map%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 20 Apr 2022 22:12:28 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/map%E8%AF%A6%E8%A7%A3/</guid>
      <description>Map集合 常见的Map有：HashMap，HashTable，LinkedHashMap, ConcurrentHashMap， TreeMap
Map都是双列的集合，采用键值对的方式存储，底层实现都是 数组 + 链表，也就是 hash表
HashMap  HashMap 的 key 和值都可以为 null HashMap是 线程不安全的（任意时刻，可以有多个线程同时写HashMap） JDK1.7 底层采用 数组 + 链表 ，JDK1.8时 底层采用 数组 + 链表 + 红黑树  HashMap底层实现：
HashMap根据 键的HashCode值存储数据，向HashMap中存储元素时，首先会计算一个hash值，然后根据hash值存到指定数组索引位置，数组的每一个元素都是一对 key-value，但由于hash值具有概率性，可能出现hash冲突，定位到同一数组下标处，此时就产生了链表结构。
由于链表的遍历效率较低，取决于链表的长度，时间复杂度为 O(N), 如果链表太长，则查找效率低。所以JDK1.8 新增了红黑树结构，当链表中的元素超过 8 之后，改用红黑树存储，查找的时间复杂度为 O(log N)
红黑树的特点： 每个节点只有两种颜色：红色或者黑色 根节点必须是黑色 每个叶子节点（NIL）都是黑色的空节点 从根节点到叶子节点，不能出现两个连续的红色节点 从任一节点出发，到它下边的子节点的路径包含的黑色节点数目都相同 大致地，HashMap里面是一个数组，数组中每个元素是一个单向链表，链表元素达到 8 以后，转为红黑树存储
每一个数组或链表元素（即下图中 绿色实体）都是 一个 Entry嵌套类的示例
Entry包含四个属性： Key 、 value 、 该数组下标的hash值、 链表的next指针
三个属性：
1. capacity： 当前数组容量，始终保持 2 ^ n（默认初始化容量是 16），可以扩容，扩容后容量为 数组大小的 2 倍 2.</description>
    </item>
    
    <item>
      <title>List详解</title>
      <link>https://sheephe66.github.io/p/list%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 20 Apr 2022 22:12:17 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/list%E8%AF%A6%E8%A7%A3/</guid>
      <description>List集合 ArrayList   ArrayList是最常用的List实现类，内部通过数组实现，可以对元素进行快速随机访问
  适合随机查找和遍历（通过索引也就是下标直接访问）
  不适合插入和删除
  线程不安全
  ArrayList扩容机制：构造时大小为 0，第一次添加元素后，变为默认容量10，当集合元素个数超过容量后，扩容方式为：当前容量的 1.5 倍
Vector  Vector内部通过数组实现 Vector使用 synchronized关键字锁定方法，即：同一时刻只能有一个线程写Vector， 所以是线程安全的 Vector访问速度比ArrayList慢，应用较少  Vector构造时容量就是 10，当元素超过集合容量时，扩容为当前容量的 2倍
LinkedList  LinkedList内部通过链表实现 适合插入和删除，速度较快（指针移动到指定位置，查询慢：需要指针从头开始一个一个查找）  </description>
    </item>
    
    <item>
      <title>服务器部署项目</title>
      <link>https://sheephe66.github.io/p/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Thu, 14 Apr 2022 18:39:56 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</guid>
      <description>服务器部署项目 常见Linux命令 查看内存： free -h
查看存储空间： df -h
查看当前运行的软件： top
查看当前目录下的所有文件： ls (ll: 将所有文件按列表展示)
解压文件： tar -zxvf 文件名
压缩文件： tar -zcvf 文件名
修改文件名： mv jdk1.8.0_321 jdk1.8
移动文件到另一个文件夹： mv jdk1.8 /usr/local/
用vim编辑文件：vim /etc/profile
查看文件最后一屏： cat /etc/profile
ubantu查看版本及内核：uname -a
pwd: 查看当前目录
ps -ef ：查看进程 （搭配grep使用 【 grep ：强大的文本搜索命令】）
ps -ef | grep java: 查看Java进程号
kill -9 进程号：杀掉该进程
nohup java -jar springboot-0.0.1-SNAPSHOT.jar &amp;amp; ：将Java项目放在后台启动
vim使用 按 A ：进入编辑模式 按 esc： 退出编辑模式 输入： :wq 保存 Linux配置Java环境变量 用vim编辑文件：</description>
    </item>
    
    <item>
      <title>SpringBoot集成SwaggerUI</title>
      <link>https://sheephe66.github.io/p/springboot%E9%9B%86%E6%88%90swaggerui/</link>
      <pubDate>Thu, 14 Apr 2022 18:39:38 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/springboot%E9%9B%86%E6%88%90swaggerui/</guid>
      <description>Spring Boot 集成 Swagger UI 访问地址：http://localhost:9090/swagger-ui/index.html
集成版本:Swagger 3.0.0 pom.xml
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Swagger配置类
SwaggerConfig.java
import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.oas.annotations.EnableOpenApi; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; @Configuration @EnableOpenApi public class SwaggerConfig { /** * 创建API应用 * apiInfo() 增加API相关信息 * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现， * 本例采用指定扫描的包路径来定义指定要建立API的目录。 * * @return */ @Bean public Docket restApi() { return new Docket(DocumentationType.SWAGGER_2) .groupName(&amp;#34;标准接口&amp;#34;) .apiInfo(apiInfo(&amp;#34;Spring Boot中使用Swagger2构建RESTful APIs&amp;#34;, &amp;#34;1.0&amp;#34;)) .useDefaultResponseMessages(true) .</description>
    </item>
    
    <item>
      <title>MybatisPlus使用</title>
      <link>https://sheephe66.github.io/p/mybatisplus%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 14 Apr 2022 18:39:09 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/mybatisplus%E4%BD%BF%E7%94%A8/</guid>
      <description>MyBatis&amp;amp;MyBatisPlus应用 MyBatis配置 mybatis:mapper-locations:classpath:mapper/*.xml #扫描所有mybatis的xml文件#mybatis日志,可以在控制台打印具体执行的sql语句# configuration:# log-impl: org.apache.ibatis.logging.stdout.StdOutImplMyBatis xml映射文件格式 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34;&amp;gt; &amp;lt;mapper namespace=&amp;#34;Mapper接口的全限定名称&amp;#34;&amp;gt; 这里写sql &amp;lt;/mapper&amp;gt; MyBatis动态sql复习 &amp;lt;if&amp;gt; 对于该标签的执行，当 test 的值为 true 时，会将其包含的 SQL 片断拼接到其所在的 SQL 语句中。 语法：&amp;lt;if test=&amp;#34;条件&amp;#34;&amp;gt; sql 语句的部分 &amp;lt;/if&amp;gt; &amp;lt;where&amp;gt; &amp;lt;if/&amp;gt;标签的中存在一个比较麻烦的地方：需要在 where 后手工添加 1=1 的子句。因为，若 where 后 的所有&amp;lt;if/&amp;gt;条件均为 false，而 where 后若又没有 1=1 子句，则 SQL 中就会只剩下一个空的 where，SQL 出错。所以，在 where 后，需要添加永为真子句 1=1，以防止这种情况的发生。但当数据量很大时，会 严重影响查询效率 使用&amp;lt;where/&amp;gt;标签，在有查询条件时，可以自动添加上 where 子句；没有查询条件时，不会添加 where 子句。需要注意的是，第一个&amp;lt;if/&amp;gt;标签中的 SQL 片断，可以不包含 and。不过，写上 and 也不错， 系统会将多出的 and 去掉。但其它&amp;lt;if/&amp;gt;中 SQL 片断的 and，必须要求写上。否则 SQL 语句将拼接出错 (&amp;lt;where&amp;gt;标签解决直接用where需要添加1=1影响效率的问题) 语法：&amp;lt;where&amp;gt; 其他动态 sql &amp;lt;/where&amp;gt; &amp;lt;foreach&amp;gt; &amp;lt;foreach/&amp;gt;标签用于实现对于数组与集合的遍历。对其使用，需要注意：collection 表示要遍历的集合类型, list ，array 等。open、close、separator 为对遍历内容的 SQL 拼接。 语法： &amp;lt;foreach collection=&amp;#34;集合类型&amp;#34; open=&amp;#34;开始的字符&amp;#34; close=&amp;#34;结束的字符&amp;#34; item=&amp;#34;集合中的成员&amp;#34; separator=&amp;#34;集合成员之间的分隔符&amp;#34;&amp;gt; #{item 的值} &amp;lt;/foreach&amp;gt; MyBatisPlus依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description>
    </item>
    
    <item>
      <title>LeetCode 排序数组</title>
      <link>https://sheephe66.github.io/p/leetcode-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 10 Apr 2022 21:54:08 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/leetcode-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>LeetCode—排序数组 题目 给你一个整数数组 nums，请你将该数组升序排列。
示例 1：
输入：nums = [5,2,3,1] 输出：[1,2,3,5] 示例 2：
输入：nums = [5,1,1,2,0,0] 输出：[0,0,1,1,2,5] 提示：
1 &amp;lt;= nums.length &amp;lt;= 5 * 104 -5 * 104 &amp;lt;= nums[i] &amp;lt;= 5 * 104 冒泡排序 （超出时间限制） 此题一开始想到的就是冒泡排序，暴力两层循环，可以运行，但时间复杂度太大， 超出时间限制
public int[] sortArray(int[] nums) { for(int i = 0; i &amp;lt; nums.length; i++) { for(int j = i+1; j &amp;lt; nums.length; j++) { if(nums[i] &amp;gt; nums[j]) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } } } return nums; } 快速排序 （最佳：8ms） // 快速排序 1：基本快速排序  /** * 列表大小等于或小于该大小，将优先于 quickSort 使用插入排序 */ private static final int INSERTION_SORT_THRESHOLD = 7; private static final Random RANDOM = new Random(); public int[] sortArray(int[] nums) { int len = nums.</description>
    </item>
    
    <item>
      <title>SpringBoot&#43;Vue项目笔记</title>
      <link>https://sheephe66.github.io/p/springboot-vue%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 10 Apr 2022 20:22:30 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/springboot-vue%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</guid>
      <description>Spring Boot + Vue 前后端分离项目 前端   安装 node.js , Vue CLI
  通过 vue ui 命令启动 Vue CLI ， 在可视化界面创建前台项目
  然后用 IntelliJ IDEA 或 VS Code 等工具进行开发
（使用 IDEA 开发需要安装Vue.js 插件，并将javaScript版本改为ECMA Script 6+）
  使用 IDEA 导入创建好的前端项目，项目是单一页面和路由跳转实现的
localhost:8080 对应的就是 App.vue 主页面，主页面不变，每次更新页
面其实是通过路由功能 替换主页面当中的 小页面
项目中将 vue2 升级为 vue3 创建Vue项目时可以选择vue的版本，即 vue2或者 vue3
如果忘记选择，项目默认会是vue2
此时只需要在项目目录下，输入：vue add vue-next
将vue2升级为vue3
使用命令行创建 vue3 项目 vue create 项目名
选择手动配置
选择 vuex 和 Router，去掉Linter （按空格键选择或去除）</description>
    </item>
    
    <item>
      <title>博客更新文章步骤</title>
      <link>https://sheephe66.github.io/p/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Sun, 10 Apr 2022 20:17:16 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%96%87%E7%AB%A0%E6%AD%A5%E9%AA%A4/</guid>
      <description>博客更新文章  博客根目录下，hugo new post/文章名.md 使用Typora等编辑器打开（根目录-content-post），写入博客文章内容 本地启动博客：博客根目录下输入：hugo server -t hugo-theme-stack &amp;ndash;buildDrafts 复制http://localhost:1313到浏览器，查看是否更新文章  将更新的文章push到远端：
  博客根目录下输入：hugo &amp;ndash;theme=hugo-theme-stack &amp;ndash;baseUrl=&amp;ldquo;https://sheephe66.github.io/&amp;quot; &amp;ndash;buildDrafts
（此时public文件夹中P文件夹中更新了博客文章(一个文件夹)，以 及其他的一些东西，所以下一步要拷贝整个文件夹）
  将更新的内容拷贝到github仓库:
​	》此处特别注意：应该将更新之后的整个public文件夹都拷贝到远程仓库下的sheephe66.github.io文件夹里，会有重复文件，点击替换即可
  接着将Github仓库push到远端：
​	》在sheephe66.github.io目录下进入git bash：
 git branch -a 查看分支（也可以不看） git add . git commit -m &amp;ldquo;提交名称&amp;rdquo; git push（push仓库，要登录github）    注意：上传每篇文章的封面图片时，需要先将要展示的图片拷贝到 D:\AA hugo-Blog\MyBlogThird\SheepHe\static 目录下，然后在Markdown文件首部用：image: &amp;ldquo;/1.jpg&amp;rdquo; 显示图片，默认回去static目录下寻找图片。
如果出现将仓库push到github后博客没有更新，可能是GitHub项目pages build and deployment没有启动成功，需要到GitHub仓库 Re-run all jobs
修改博客主题：D:\Blog\MyBlogThird\SheepHe\themes\hugo-theme-stack\exampleSite，修改此目录下的 config.yaml文件
目前博客主题地址：https://github.com/CaiJimmy/hugo-theme-stack.git
Hugo theme Stack主题中文文档：https://docs.stack.jimmycai.com/v/zh-cn/
github+Picgo图床如果不能上传图片了，可以尝试重新生成token令牌</description>
    </item>
    
    <item>
      <title>导入Module</title>
      <link>https://sheephe66.github.io/p/%E5%AF%BC%E5%85%A5module/</link>
      <pubDate>Sat, 09 Apr 2022 20:35:08 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E5%AF%BC%E5%85%A5module/</guid>
      <description>解决Idea中 Module 变成目录无法运行的问题 在Idea中，有时将项目中的 Module remove 之后，如何将蓝色小方块恢复，使其重新变成Module
或者将别人的项目导入时，也需要通过这种方法，将其从目录的性转换成Module 来运行
右击项目根目录，Open Module Settings
点击Modules，import Module
选择Maven
然后点击finish，Apply即可</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://sheephe66.github.io/p/%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 22 Nov 2021 19:12:05 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E6%B5%8B%E8%AF%95/</guid>
      <description>bbb</description>
    </item>
    
    <item>
      <title>NextCloud搭建私有云</title>
      <link>https://sheephe66.github.io/p/nextcloud%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91/</link>
      <pubDate>Tue, 16 Nov 2021 22:04:39 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/nextcloud%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BA%91/</guid>
      <description>其实搭这个网盘也不是说度盘限速个人隐私什么的，主要是因为刚买了个云服务器，就想整点活儿，感觉搭个私人网盘还挺有意思的，用来存点资料还是可以的，但大的文件就不行了，因为买的最基础的ECS n4配置，系统盘最大就只给100G。。真要存东西还得上NAS。
本篇文章就记录一下搭建网盘的过程，过程中主要使用的是宝塔Linux面板进行站点搭建的，纯Linux命令行应该也可以，但我命令用的还是不熟练，宝塔面板非常方便好用，大大节省了时间。
云服务器安装宝塔Linux面板 不同的操作系统对应不同的命令，我的服务器安装的是Ubantu，ssh连接到服务器后，切换到root权限，输入对应命令即可
 CentOS安装命令  yum install -y wget &amp;amp;&amp;amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;amp;&amp;amp; sh install.sh  Ubantu/Deepin安装命令  wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;amp;&amp;amp; sudo bash install.sh  Debian安装命令  wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;amp;&amp;amp; bash install.sh 安装完成后，就可以得到宝塔面板的访问地址和默认管理员账户(需要保存下来)
登录宝塔面板并搭建站点 直接进外网地址可能无法访问，是因为阿里云后台没有开放端口号，宝塔面板访问地址默认端口号是：8888，需要进阿里云后台配置安全组规则开放8888端口（也可以修改），后面搭建站点也是同理，若没有域名，用ip + 端口号访问的话，用哪一个端口，就要去阿里云安全组放行对应端口。
放行后，登陆成功！
安装Nginx、php等组件 推荐使用LNMP极速安装（这里不小心踩了个坑，php最好安装最新版本，因为在我弄好之后访问NextCloud时，提示php的版本最低要7.3。。。不过还好可以直接升级）
接下来就等待安装即可，大概下载了20分钟
接下来需要安装两个扩展插件
如果有域名的话，可以为域名申请SSL证书，就是用https加密，不会出现不安全的标志。按理说也可以直接给服务器ip直接申请SSL证书，但我点击申请却出错了，不知道为啥。。。不过有没有不影响使用。
安装NextCloud  NextCloud官网下载Linux版的压缩包，宝塔面板上传到服务器   解压安装到站点目录  OK，接下来就可以直接访问了！
此处就是创建一个管理员账户，登陆进去后，可以在为其他用户分配普通权限账户，还可以分配账户的可用存储容量。</description>
    </item>
    
    <item>
      <title>JsDelivr加速图床</title>
      <link>https://sheephe66.github.io/p/jsdelivr%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Wed, 10 Nov 2021 13:31:09 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/jsdelivr%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/</guid>
      <description>Github + jsDelivr + PicGo加速图床 单独使用GitHub做图床，在国内访问时速度加载较慢，记录一下使用免费CDN
（jsDelivr）给图床加速
  先创建一个GitHub仓库，用于保存博客上传的图片，在设置中获取token
  下载安装PicGo，将上面获取的token，填到PicGo配置中
  完成PicGO图床配置，使用jsDelivr就是在PicGo配置最后的自定义域名中填上jsDelivr的加速链接
  加速链接：https://cdn.jsdelivr.net/gh/SheepHe66/BlogPictures@main
 gh 表示 Github仓库 SheepHe66/BlogPictures 表示 仓库名 main 表示 分支     最后配合博客使用，就在Typora偏好设置中，选择图像，选择使用PicGo（app）上传图片，并添加PicGo安装路径  这样，就好了~~</description>
    </item>
    
    <item>
      <title>阿里云服务器安装配置</title>
      <link>https://sheephe66.github.io/p/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 09 Nov 2021 20:17:55 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>双十一B站UP主给阿里云做活动，买云服务器满58返现60，本来想着白嫖一年的，但又想好好利用新用户的优惠，就买了三年的，170再返现60，相当于110买了三年，感觉很赚。。
服务器基本配置 阿里云ECS n4 1核 2G 1M带宽
操作系统：ubantu 20.04
安装openjdk1.8  更新软件包列表  sudo apt-get update  安装openjdk-8  sudo apt-get install openjdk-8-jdk  查看java版本  java -version  查看openjdk装在哪里  update-alternatives --config java </description>
    </item>
    
    <item>
      <title>Ajax笔记</title>
      <link>https://sheephe66.github.io/p/ajax%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 06 Nov 2021 22:29:21 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/ajax%E7%AC%94%E8%AE%B0/</guid>
      <description>文章目录  Ajax概述 1.1 AJAX 简介 1.2 XML 简介 1.3 AJAX 的特点 1.3.1 AJAX 的优点 1.3.2 AJAX 的缺点 HTTP相关问题 2.1 MDN 文档 2.2 HTTP 请求交互的基本过程 2.3 HTTP 请求报文 请求行 多个请求头 请求体 2.4 HTTP 响应报文 2.5 post 请求体参数格式 2.6 常见的响应状态码 2.7 不同类型的请求及其作用 2.8 API 的分类 2.9 区别 一般http请求 与 ajax请求 原生AJAX 的基本使用 XHR 3.0 准备工作 3.0.1 安装node.js 3.0.2 安装express（服务端框架） 3.0.3 安装nodemon自动重启工具 3.1 理解 3.2 核心对象使用步骤 3.2.1 创建XMLHttpRequest 对象 3.2.2 设置请求信息（请求方法和url） 3.2.3 发送请求 3.</description>
    </item>
    
    <item>
      <title>JavaSE 面向对象</title>
      <link>https://sheephe66.github.io/p/javase-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Tue, 18 May 2021 19:21:07 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/javase-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>JavaSE&amp;ndash;面向对象整合 面向对象的三条主线  类和类员：属性，方法，构造器，代码块等 面向对象的三大特征：封装，继承，多态 其他关键字:this,super,abstract,interface,static, final,package,import  封装 封装性的体现：
 我们将类的属性xxx私有化（private），同时，提供公共的（public）方法来获取（getxxx）和设置（setxxx）此属性的值 不对外暴露的私有方法 单例模式  权限修饰符：(权限从小到大) private , 缺省（不写） , protected , public
继承 一旦子类A继承了父类B，则子类A就获得了父类B中声明的结构（所有属性、方法等，包括封装性）
Java继承的规定
  单继承性：一个类只能有一个父类
  子父类是相对的概念
  子类直接继承的父类，称为：直接父类。间接继承的父类称为间接父类（java中一个子类不存在多个父类，只有间接继承，即一个子类的父类是另一个类的子类）
  多态 可以理解为一个事物的多种形态
也称为对象的多态性：父类的引用指向子类的对象。 eg：
class Person{ } class Man extends Person{ } class Women extends Person{ } //对象的多态性，父类的引用指向子类的对象 Person p1 = new Man(); Person p2 = new Women(); 多态性的使用：虚拟方法调用 有了多态性以后，在编译的时候，只能调用父类的声明的方法，而运行时，实际执行的是子类重写父类的方法
即：编译看左边，运行看右边
 多态性的使用前提：①有类的继承；②有方法的重写</description>
    </item>
    
    <item>
      <title>第一篇正经博客！</title>
      <link>https://sheephe66.github.io/p/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%AD%A3%E7%BB%8F%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 23 Apr 2021 22:03:34 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%AD%A3%E7%BB%8F%E5%8D%9A%E5%AE%A2/</guid>
      <description>我的博客终于搭建成功了，真是不容易啊！！！今天来写篇正经博客！
目前博客只有两篇文章，不过都是用来测试的。。。第一篇FirstBlog是博客首次本地启动的时候随便写的用来测试本地有没有启动成功的，第二篇计算机网络脉络梳理， 作为第二次测试记得好像是已经搭建好了，也部署到Github上去了，然后测试更新文章来着。emmm······看起来是很干货，其实是从B站UP主CodeSheep(一个宝藏程序猿UP)的的一期干货视频里做的笔记，主要是针对面试的计算机网络学习路线梳理。因为这个已经是总结好的了，反正以后也是要发的，就干脆作为测试发布了。
第一篇(正经)博客，不知道写啥，那还是来聊聊我的博客是怎么搭建的吧，毕竟搭博客的过程中踩了太多坑了。。。我还截了好多图，必须记录一下！
我其实很早就想弄一个自己的个人博客网站了，作为一个非计算机专业的我觉得这很酷。大概去年吧，还真的去尝试了一下，很显然，以失败告终。。。当时是在知乎上找的教程，那上面让去Github上面clone别人的博客框架，看着教程简单，但第一步就出错了，一个按钮直接变成灰色不让我点。。。WTF！然后就没有然后了。但前一段时间在B站关注了一个宝藏程序猿UP，就是上面提到的CodeSheep，我羊哥！视频、微信公众号全是干货，好家伙，简直我的最爱呀！翻到以前的视频，好几期都是关于小白如何搭建自己的个人博客的，还说博客对以后的面试会很有帮助，一下子就让我重新燃起了自信！于是选了一个简单点Hugo博客框架，但由于他是MAC OS，我又去CSDN找了一个详细的教程，就开始了。
还是那句话，教程看着简单，一步一步的很详细，但总是会在莫名其妙的位置出各种莫名其妙的错误！前面瞎BB了半天，这里来写一下具体步骤以及踩坑是怎么处理的吧。
Windows系统上基于Hugo博客框架创建个人博客 下载Hugo博客框架，配置环境变量，检查是否安装成功
下载Git并安装
创建一个博客文件夹Blog，里面再放一个BlogOne文件夹，在当前目录下右键打开Git，输入：hugo new site SheepHe(博客名)
打开SheepHe，下载hugo博客主题（https://themes.gohugo.io/）
复制主题链接后，在themes目录下输入：git clone +主题地址
（需要将exampleSite文件夹里的config文件复制并替换根目录下的config文件)
本地启动博客，hugo server -t hugo-theme-stack &amp;ndash;buildDrafts
此时复制http://localhost:1313到浏览器可以本地访问
写文章，根目录下，hugo new post/文章名.md,然后打开Typora等编辑器写文章，接着重新运行，hugo server -t hugo-theme-stack &amp;ndash;buildDrafts
接着部署到Github上，重点就在这儿：
新建Github项目
根目录下，输入：
hugo &amp;ndash;theme=hugo-theme-stack &amp;ndash;baseUrl=&amp;ldquo;https://sheephe66.github.io/&amp;quot; &amp;ndash;buildDrafts
会生成一个public文件夹，标准步骤是：在此public文件夹下输入：
git init git add . git commit -m &amp;ldquo;我的博客第一次提交&amp;rdquo; git remote add origin https://github.com/sheephe66/sheephe66.github.io.git git push -u -origin master
就是要push这个public文件夹，是不是看着很简单，我以为我都要成功了，最后一步push，Git报了一个致命错误，我看不懂!
后来请教好多人，以及百度谷歌了好久还是没能解决，最后请教了B站另一位良心UP主 ，我水哥，一个架构师，他让他小弟帮我解决的，不过还是没能解决那个报错，用的另外一种方法，将Github仓库clone到本地，然后将public文件夹复制到仓库里，然后整个一起提交，终于解决了！当时激动了好久！
ps:水哥说，这种方法还适用于以后工作，不行就把项目拉到本地，直接clone，很有效！嗯嗯，学到了！
OK，就BB这么多了，以后就不说这么多废话了，尽量更新一些阶段性学习成果、笔记和心得！学习去了~~~</description>
    </item>
    
    <item>
      <title>计算机网络脉络梳理</title>
      <link>https://sheephe66.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%84%89%E7%BB%9C%E6%A2%B3%E7%90%86/</link>
      <pubDate>Mon, 19 Apr 2021 17:37:55 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%84%89%E7%BB%9C%E6%A2%B3%E7%90%86/</guid>
      <description>计算机网络脉络梳理 主要指TCP/IP 协议栈，大部分隐藏于操作系统内核（数据链路层，网络层，传输层），封装于操作系统内部，但是要了解原理
数据链路层
网络层：IP
传输层：TCP，UDP
平时用户空间接触到只有应用层协议：FTP，HTTP，DNS，HTTPS
工作中接触的以应用层为主
 数据链路层  以太网帧的格式 MTU的概念 ARP协议 和RARP协议（ARP报文格式，ARP缓存原理）  网络层 IP协议：   掌握IP首部标识：如16位分片标识、DF不分片标志、MF更多分片标志、13位片位移，8位生存空间TTL，16位的首部检验等等
  掌握IP分片：避免IP分片
  路由表
  掌握ICMP协议：报文格式、报文的两大分类：查询+差错
​	2钟报文格式 + 5钟差错控
  传输层 UDP协议：  特点 + 首部各个字段  TCP协议：   特点 + 首部各个字段
  TCP连接控制：三次握手、四次挥手、同时打开、同时关闭、半关闭
  TCP流量控制机制：滑动窗口、慢启动、拥塞避免、快速重传、快速恢复
  TCP超时重传机制：各种定时器
  （学的过程中多问为什么？比如为什么是三次握手、四次挥手）
应用层 DNS协议：  DNS协议的名字空间、DNS指针查询(反向查找或逆向解析)基本原理、DNS缓存  FTP协议：  两条连接：控制连接 + 数据连接 两种工作模式：PASV + PORT 各种FTP的指令 和 响应码 FTP断点续传、匿名FTP  HTTP协议：  报文格式：请求报文、响应报文、请求头各种字段、响应头各种字段 http状态码  HTTPS协议：  https协议的详细握手过程 摘要算法、数字签名、数字证书的原理和过程  </description>
    </item>
    
    <item>
      <title>FirstBlog</title>
      <link>https://sheephe66.github.io/p/firstblog/</link>
      <pubDate>Sat, 17 Apr 2021 11:24:46 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/firstblog/</guid>
      <description>2020.04.17 11:26 ，我的博客第三次搭建。。。</description>
    </item>
    
  </channel>
</rss>
