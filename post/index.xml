<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SheepHe&#39;s Blog</title>
    <link>https://sheephe66.github.io/post/</link>
    <description>Recent content in Posts on SheepHe&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Nov 2021 19:12:05 +0800</lastBuildDate><atom:link href="https://sheephe66.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试</title>
      <link>https://sheephe66.github.io/p/post/</link>
      <pubDate>Mon, 22 Nov 2021 19:12:05 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/post/</guid>
      <description>bbb</description>
    </item>
    
    <item>
      <title>NextCloud搭建私有云</title>
      <link>https://sheephe66.github.io/p/post/</link>
      <pubDate>Tue, 16 Nov 2021 22:04:39 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/post/</guid>
      <description>其实搭这个网盘也不是说度盘限速个人隐私什么的，主要是因为刚买了个云服务器，就想整点活儿，感觉搭个私人网盘还挺有意思的，用来存点资料还是可以的，但大的文件就不行了，因为买的最基础的ECS n4配置，系统盘最大就只给100G。。真要存东西还得上NAS。
本篇文章就记录一下搭建网盘的过程，过程中主要使用的是宝塔Linux面板进行站点搭建的，纯Linux命令行应该也可以，但我命令用的还是不熟练，宝塔面板非常方便好用，大大节省了时间。
云服务器安装宝塔Linux面板 不同的操作系统对应不同的命令，我的服务器安装的是Ubantu，ssh连接到服务器后，切换到root权限，输入对应命令即可
 CentOS安装命令  yum install -y wget &amp;amp;&amp;amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;amp;&amp;amp; sh install.sh  Ubantu/Deepin安装命令  wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;amp;&amp;amp; sudo bash install.sh  Debian安装命令  wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;amp;&amp;amp; bash install.sh 安装完成后，就可以得到宝塔面板的访问地址和默认管理员账户(需要保存下来)
登录宝塔面板并搭建站点 直接进外网地址可能无法访问，是因为阿里云后台没有开放端口号，宝塔面板访问地址默认端口号是：8888，需要进阿里云后台配置安全组规则开放8888端口（也可以修改），后面搭建站点也是同理，若没有域名，用ip + 端口号访问的话，用哪一个端口，就要去阿里云安全组放行对应端口。
放行后，登陆成功！
安装Nginx、php等组件 推荐使用LNMP极速安装（这里不小心踩了个坑，php最好安装最新版本，因为在我弄好之后访问NextCloud时，提示php的版本最低要7.3。。。不过还好可以直接升级）
接下来就等待安装即可，大概下载了20分钟
接下来需要安装两个扩展插件
如果有域名的话，可以为域名申请SSL证书，就是用https加密，不会出现不安全的标志。按理说也可以直接给服务器ip直接申请SSL证书，但我点击申请却出错了，不知道为啥。。。不过有没有不影响使用。
安装NextCloud  NextCloud官网下载Linux版的压缩包，宝塔面板上传到服务器   解压安装到站点目录  OK，接下来就可以直接访问了！
此处就是创建一个管理员账户，登陆进去后，可以在为其他用户分配普通权限账户，还可以分配账户的可用存储容量。</description>
    </item>
    
    <item>
      <title>JsDelivr加速图床</title>
      <link>https://sheephe66.github.io/p/jsdelivr%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Wed, 10 Nov 2021 13:31:09 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/jsdelivr%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/</guid>
      <description>Github + jsDelivr + PicGo加速图床 单独使用GitHub做图床，在国内访问时速度加载较慢，记录一下使用免费CDN
（jsDelivr）给图床加速
  先创建一个GitHub仓库，用于保存博客上传的图片，在设置中获取token
  下载安装PicGo，将上面获取的token，填到PicGo配置中
  完成PicGO图床配置，使用jsDelivr就是在PicGo配置最后的自定义域名中填上jsDelivr的加速链接
  加速链接：https://cdn.jsdelivr.net/gh/SheepHe66/BlogPictures@main
 gh 表示 Github仓库 SheepHe66/BlogPictures 表示 仓库名 main 表示 分支     最后配合博客使用，就在Typora偏好设置中，选择图像，选择使用PicGo（app）上传图片，并添加PicGo安装路径  这样，就好了~~</description>
    </item>
    
    <item>
      <title>阿里云服务器安装配置</title>
      <link>https://sheephe66.github.io/p/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 09 Nov 2021 20:17:55 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid>
      <description>双十一B站UP主给阿里云做活动，买云服务器满58返现60，本来想着白嫖一年的，但又想好好利用新用户的优惠，就买了三年的，170再返现60，相当于110买了三年，感觉很赚。。
服务器基本配置 阿里云ECS n4 1核 2G 1M带宽
操作系统：ubantu 20.04
安装openjdk1.8  更新软件包列表  sudo apt-get update  安装openjdk-8  sudo apt-get install openjdk-8-jdk  查看java版本  java -version  查看openjdk装在哪里  update-alternatives --config java </description>
    </item>
    
    <item>
      <title>Ajax笔记</title>
      <link>https://sheephe66.github.io/p/ajax%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 06 Nov 2021 22:29:21 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/ajax%E7%AC%94%E8%AE%B0/</guid>
      <description>文章目录  Ajax概述 1.1 AJAX 简介 1.2 XML 简介 1.3 AJAX 的特点 1.3.1 AJAX 的优点 1.3.2 AJAX 的缺点 HTTP相关问题 2.1 MDN 文档 2.2 HTTP 请求交互的基本过程 2.3 HTTP 请求报文 请求行 多个请求头 请求体 2.4 HTTP 响应报文 2.5 post 请求体参数格式 2.6 常见的响应状态码 2.7 不同类型的请求及其作用 2.8 API 的分类 2.9 区别 一般http请求 与 ajax请求 原生AJAX 的基本使用 XHR 3.0 准备工作 3.0.1 安装node.js 3.0.2 安装express（服务端框架） 3.0.3 安装nodemon自动重启工具 3.1 理解 3.2 核心对象使用步骤 3.2.1 创建XMLHttpRequest 对象 3.2.2 设置请求信息（请求方法和url） 3.2.3 发送请求 3.</description>
    </item>
    
    <item>
      <title>JavaSE 面向对象</title>
      <link>https://sheephe66.github.io/p/javase-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Tue, 18 May 2021 19:21:07 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/javase-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>JavaSE&amp;ndash;面向对象整合 面向对象的三条主线  类和类员：属性，方法，构造器，代码块等 面向对象的三大特征：封装，继承，多态 其他关键字:this,super,abstract,interface,static, final,package,import  封装 封装性的体现：
 我们将类的属性xxx私有化（private），同时，提供公共的（public）方法来获取（getxxx）和设置（setxxx）此属性的值 不对外暴露的私有方法 单例模式  权限修饰符：(权限从小到大) private , 缺省（不写） , protected , public
继承 一旦子类A继承了父类B，则子类A就获得了父类B中声明的结构（所有属性、方法等，包括封装性）
Java继承的规定
  单继承性：一个类只能有一个父类
  子父类是相对的概念
  子类直接继承的父类，称为：直接父类。间接继承的父类称为间接父类（java中一个子类不存在多个父类，只有间接继承，即一个子类的父类是另一个类的子类）
  多态 可以理解为一个事物的多种形态
也称为对象的多态性：父类的引用指向子类的对象。 eg：
class Person{ } class Man extends Person{ } class Women extends Person{ } //对象的多态性，父类的引用指向子类的对象 Person p1 = new Man(); Person p2 = new Women(); 多态性的使用：虚拟方法调用 有了多态性以后，在编译的时候，只能调用父类的声明的方法，而运行时，实际执行的是子类重写父类的方法
即：编译看左边，运行看右边
 多态性的使用前提：①有类的继承；②有方法的重写</description>
    </item>
    
    <item>
      <title>第一篇正经博客！</title>
      <link>https://sheephe66.github.io/p/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%AD%A3%E7%BB%8F%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 23 Apr 2021 22:03:34 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%AD%A3%E7%BB%8F%E5%8D%9A%E5%AE%A2/</guid>
      <description>我的博客终于搭建成功了，真是不容易啊！！！今天来写篇正经博客！
目前博客只有两篇文章，不过都是用来测试的。。。第一篇FirstBlog是博客首次本地启动的时候随便写的用来测试本地有没有启动成功的，第二篇计算机网络脉络梳理， 作为第二次测试记得好像是已经搭建好了，也部署到Github上去了，然后测试更新文章来着。emmm······看起来是很干货，其实是从B站UP主CodeSheep(一个宝藏程序猿UP)的的一期干货视频里做的笔记，主要是针对面试的计算机网络学习路线梳理。因为这个已经是总结好的了，反正以后也是要发的，就干脆作为测试发布了。
第一篇(正经)博客，不知道写啥，那还是来聊聊我的博客是怎么搭建的吧，毕竟搭博客的过程中踩了太多坑了。。。我还截了好多图，必须记录一下！
我其实很早就想弄一个自己的个人博客网站了，作为一个非计算机专业的我觉得这很酷。大概去年吧，还真的去尝试了一下，很显然，以失败告终。。。当时是在知乎上找的教程，那上面让去Github上面clone别人的博客框架，看着教程简单，但第一步就出错了，一个按钮直接变成灰色不让我点。。。WTF！然后就没有然后了。但前一段时间在B站关注了一个宝藏程序猿UP，就是上面提到的CodeSheep，我羊哥！视频、微信公众号全是干货，好家伙，简直我的最爱呀！翻到以前的视频，好几期都是关于小白如何搭建自己的个人博客的，还说博客对以后的面试会很有帮助，一下子就让我重新燃起了自信！于是选了一个简单点Hugo博客框架，但由于他是MAC OS，我又去CSDN找了一个详细的教程，就开始了。
还是那句话，教程看着简单，一步一步的很详细，但总是会在莫名其妙的位置出各种莫名其妙的错误！前面瞎BB了半天，这里来写一下具体步骤以及踩坑是怎么处理的吧。
Windows系统上基于Hugo博客框架创建个人博客 下载Hugo博客框架，配置环境变量，检查是否安装成功
下载Git并安装
创建一个博客文件夹Blog，里面再放一个BlogOne文件夹，在当前目录下右键打开Git，输入：hugo new site SheepHe(博客名)
打开SheepHe，下载hugo博客主题（https://themes.gohugo.io/）
复制主题链接后，在themes目录下输入：git clone +主题地址
（需要将exampleSite文件夹里的config文件复制并替换根目录下的config文件)
本地启动博客，hugo server -t hugo-theme-stack &amp;ndash;buildDrafts
此时复制http://localhost:1313到浏览器可以本地访问
写文章，根目录下，hugo new post/文章名.md,然后打开Typora等编辑器写文章，接着重新运行，hugo server -t hugo-theme-stack &amp;ndash;buildDrafts
接着部署到Github上，重点就在这儿：
新建Github项目
根目录下，输入：
hugo &amp;ndash;theme=hugo-theme-stack &amp;ndash;baseUrl=&amp;ldquo;https://sheephe66.github.io/&amp;quot; &amp;ndash;buildDrafts
会生成一个public文件夹，标准步骤是：在此public文件夹下输入：
git init git add . git commit -m &amp;ldquo;我的博客第一次提交&amp;rdquo; git remote add origin https://github.com/sheephe66/sheephe66.github.io.git git push -u -origin master
就是要push这个public文件夹，是不是看着很简单，我以为我都要成功了，最后一步push，Git报了一个致命错误，我看不懂!
后来请教好多人，以及百度谷歌了好久还是没能解决，最后请教了B站另一位良心UP主 ，我水哥，一个架构师，他让他小弟帮我解决的，不过还是没能解决那个报错，用的另外一种方法，将Github仓库clone到本地，然后将public文件夹复制到仓库里，然后整个一起提交，终于解决了！当时激动了好久！
ps:水哥说，这种方法还适用于以后工作，不行就把项目拉到本地，直接clone，很有效！嗯嗯，学到了！
OK，就BB这么多了，以后就不说这么多废话了，尽量更新一些阶段性学习成果、笔记和心得！学习去了~~~</description>
    </item>
    
    <item>
      <title>计算机网络脉络梳理</title>
      <link>https://sheephe66.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%84%89%E7%BB%9C%E6%A2%B3%E7%90%86/</link>
      <pubDate>Mon, 19 Apr 2021 17:37:55 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%84%89%E7%BB%9C%E6%A2%B3%E7%90%86/</guid>
      <description>计算机网络脉络梳理 主要指TCP/IP 协议栈，大部分隐藏于操作系统内核（数据链路层，网络层，传输层），封装于操作系统内部，但是要了解原理
数据链路层
网络层：IP
传输层：TCP，UDP
平时用户空间接触到只有应用层协议：FTP，HTTP，DNS，HTTPS
工作中接触的以应用层为主
 数据链路层  以太网帧的格式 MTU的概念 ARP协议 和RARP协议（ARP报文格式，ARP缓存原理）  网络层 IP协议：   掌握IP首部标识：如16位分片标识、DF不分片标志、MF更多分片标志、13位片位移，8位生存空间TTL，16位的首部检验等等
  掌握IP分片：避免IP分片
  路由表
  掌握ICMP协议：报文格式、报文的两大分类：查询+差错
​	2钟报文格式 + 5钟差错控
  传输层 UDP协议：  特点 + 首部各个字段  TCP协议：   特点 + 首部各个字段
  TCP连接控制：三次握手、四次挥手、同时打开、同时关闭、半关闭
  TCP流量控制机制：滑动窗口、慢启动、拥塞避免、快速重传、快速恢复
  TCP超时重传机制：各种定时器
  （学的过程中多问为什么？比如为什么是三次握手、四次挥手）
应用层 DNS协议：  DNS协议的名字空间、DNS指针查询(反向查找或逆向解析)基本原理、DNS缓存  FTP协议：  两条连接：控制连接 + 数据连接 两种工作模式：PASV + PORT 各种FTP的指令 和 响应码 FTP断点续传、匿名FTP  HTTP协议：  报文格式：请求报文、响应报文、请求头各种字段、响应头各种字段 http状态码  HTTPS协议：  https协议的详细握手过程 摘要算法、数字签名、数字证书的原理和过程  </description>
    </item>
    
    <item>
      <title>FirstBlog</title>
      <link>https://sheephe66.github.io/p/firstblog/</link>
      <pubDate>Sat, 17 Apr 2021 11:24:46 +0800</pubDate>
      
      <guid>https://sheephe66.github.io/p/firstblog/</guid>
      <description>2020.04.17 11:26 ，我的博客第三次搭建。。。</description>
    </item>
    
  </channel>
</rss>
